/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from "react";
import * as THREE from "three";
import { act, useFrame, useLoader } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useControls } from "leva";

import { lerp } from "../../helpers/animation";

export default function Model({ ...props }) {
  const {
    scaleFactor,
    color,
    positionX,
    positionY,
    positionZ,
    wireframe,
    rotationX,
    rotationY,
    rotationZ,
    emissiveIntensity,
  } = useControls("plane", {
    scaleFactor: {
      value: 10,
      min: 0.1,
      max: 100,
      step: 0.5,
    },
    emissiveIntensity: {
      min: 0,
      max: 100,
      value: 0,
      step: 0.01,
    },
    color: "#fff",
    positionX: {
      value: 0,
      min: -1000,
      max: 1000,
      step: 0.01,
    },
    positionY: {
      value: 0,
      min: -1000,
      max: 1000,
      step: 0.1,
    },
    positionZ: {
      value: 695,
      min: -1000,
      max: 1000,
      step: 0.1,
    },
    rotationX: {
      value: Math.PI / 2,
      step: 0.1,
      min: -1000,
      max: 1000,
    },
    rotationY: {
      value: 0,
      step: 0.1,
      min: -1000,
      max: 1000,
    },
    rotationZ: {
      value: -Math.PI * 2,
      step: 0.1,
      min: -1000,
      max: 1000,
    },
    wireframe: false,
  });

  const plane = useRef();

  const divContainer = document.querySelector(".scrollContainer");
  var percentage = 0;
  var scrollY = 0;
  var event = {
    y: 0,
    deltaY: 0,
  };
  var maxHeight =
    (divContainer.clientHeight || divContainer.offsetHeight) -
    window.innerHeight;

  const { nodes, materials, animations } = useGLTF("/plane.glb");
  console.log("nodes: ", nodes);
  const { actions } = useAnimations(animations, plane);

  useEffect(() => {
    actions?.fold.setDuration(3000);
    actions.fold.clampWhenFinished = true;
    actions?.fold.play();
  });

  function onWheel2(e) {
    e.stopImmediatePropagation();
    e.preventDefault();
    e.stopPropagation();
    var evt = event;
    evt.deltaY = e.wheelDeltaY || e.deltaY * -1;
    // reduce by half the delta amount otherwise it scroll too fast
    evt.deltaY *= 0.5;
    scroll(e);
  }

  function scroll(e) {
    var evt = event;
    // limit scroll top
    if (evt.y + evt.deltaY > 0) {
      evt.y = 0;
      // limit scroll bottom
    } else if (-(evt.y + evt.deltaY) >= maxHeight) {
      evt.y = -maxHeight;
    } else {
      evt.y += evt.deltaY;
    }

    scrollY = -evt.y;

    percentage = lerp(percentage, scrollY, 0.08);
    actions?.fold?._mixer.setTime(percentage / 2);
  }

  useEffect(() => {
    divContainer.addEventListener("wheel", onWheel2, true);
  }, []);

  const test = useLoader(THREE.TextureLoader, "/test.jpg");
  const hello = useLoader(THREE.TextureLoader, "/hello.jpeg");
  hello.flipY = false;
  test.flipY = false;

  return (
    <group>
      <group
        layers={2}
        scale={[scaleFactor, scaleFactor, scaleFactor]}
        position={[positionX, positionY, positionZ]}
        rotation={[rotationX, rotationY, rotationZ]}
        ref={plane}
        {...props}
        dispose={null}
      >
        <mesh
          layers={2}
          name="plane"
          geometry={nodes.plane.geometry}
          morphTargetDictionary={nodes.plane.morphTargetDictionary}
          morphTargetInfluences={nodes.plane.morphTargetInfluences}
        >
          <meshStandardMaterial
            emissive={color}
            side={THREE.FrontSide}
            map={hello}
          ></meshStandardMaterial>
        </mesh>
        <mesh
          layers={2}
          name="plane"
          geometry={nodes.plane.geometry}
          morphTargetDictionary={nodes.plane.morphTargetDictionary}
          morphTargetInfluences={nodes.plane.morphTargetInfluences}
        >
          <meshStandardMaterial
            emissive={color}
            side={THREE.BackSide}
            map={hello}
          ></meshStandardMaterial>
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("/plane.glb");
