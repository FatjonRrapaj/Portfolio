/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect, useState } from "react";
import * as THREE from "three";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useLoader, useThree } from "@react-three/fiber";
import { useControls } from "leva";
import anime from "animejs/lib/anime.es.js";

import { lerp } from "../../helpers/animation";
import useStore from "../../store";

export default function Model({ ...props }) {
  const { camera } = useThree();

  /** GLTF PaperPlane controls leva */
  const {
    scaleFactor,
    color,
    positionX,
    positionY,
    positionZ,
    wireframe,
    rotationX,
    rotationY,
    rotationZ,
    emissiveIntensity,
  } = useControls("plane", {
    scaleFactor: {
      value: 10,
      min: 0.1,
      max: 100,
      step: 0.5,
    },
    emissiveIntensity: {
      min: 0,
      max: 100,
      value: 0,
      step: 0.01,
    },
    color: "#fff",
    positionX: {
      value: 0,
      min: -1000,
      max: 1000,
      step: 0.01,
    },
    positionY: {
      value: 0,
      min: -1000,
      max: 1000,
      step: 0.1,
    },
    positionZ: {
      value: 695,
      min: -1000,
      max: 1000,
      step: 0.1,
    },
    rotationX: {
      value: Math.PI / 2,
      step: 0.1,
      min: -1000,
      max: 1000,
    },
    rotationY: {
      value: 0,
      step: 0.1,
      min: -1000,
      max: 1000,
    },
    rotationZ: {
      value: -Math.PI * 2,
      step: 0.001,
      min: -1000,
      max: 1000,
    },
    wireframe: false,
  });

  /** GLTF variables */
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/ekzotik.glb");
  const { actions } = useAnimations(animations, group);
  console.log("actions: ", actions);

  /** GLTF PaperPlane textures */
  const test = useLoader(THREE.TextureLoader, "/test.jpg");
  const hello = useLoader(THREE.TextureLoader, "/hello.jpeg");
  hello.flipY = false;
  test.flipY = false;

  /** Window event listener handlers */
  const divContainer = document.getElementById("fold");
  var maxHeight = divContainer.clientHeight - window.innerHeight;
  var percentage = 0;
  var scrollY = 0;
  var event = {
    y: 0,
    deltaY: 0,
  };

  let time = 0;

  // function onWheel(e) {
  //   var evt = event;
  //   evt.deltaY = e.wheelDeltaY || e.deltaY * -1;
  //   // reduce by half the delta amount otherwise it scroll too fast
  //   evt.deltaY *= 0.5;

  //   scroll(e);
  // }
  // function scroll(e) {
  //   var evt = event;
  //   // limit scroll top
  //   if (evt.y + evt.deltaY > 0) {
  //     evt.y = 0;
  //     // limit scroll bottom
  //   } else if (-(evt.y + evt.deltaY) >= maxHeight) {
  //     evt.y = -maxHeight;
  //   } else {
  //     evt.y += evt.deltaY;
  //   }
  //   scrollY = -evt.y;
  //   percentage = lerp(percentage, scrollY, 0.07);
  //   if (percentage >= 0 && percentage < 14990) {
  //     actions?.fold?._mixer.setTime(percentage * (14990 / maxHeight));
  //   }
  // }
  const onResize = () => {
    maxHeight =
      (divContainer.clientHeight || divContainer.offsetHeight) -
      window.innerHeight;
  };

  /** Store subscription handling */
  const positionRef = useRef([0, 0, 695]);

  let lastTrajectoryAnimValue = -Infinity;

  useEffect(() => {
    //Scroll & resize event listeners
    divContainer.scrollIntoView();
    // divContainer.addEventListener("wheel", onWheel, false);
    // window.addEventListener("resize", onResize, { passive: true });

    //GLTF animation
    const { fold } = actions;
    fold.reset();
    fold.setLoop(THREE.LoopOnce, 1);
    fold.setDuration(15000);
    fold._mixer.time = 15000;
    fold.clampWhenFinished = true;
    fold.play();

    //Zustand store subscriptions

    const unsubscribeAnimation = useStore.subscribe(
      (state) => state.paperPlane,
      ({ animationTime }) => {
        if (animationTime != null) {
          if (animationTime < 15000) {
            fold._mixer.setTime(animationTime);
          }
        }
      }
    );

    const unsubscribeAnimationToInitialTrajectoryPoint = useStore.subscribe(
      (state) => state.paperPlane,
      ({ initialTrajectoryPointAnimationTime }) => {
        if (initialTrajectoryPointAnimationTime != null) {
          if (timeline.began && timeline.completed) {
            timeline.completed = false;
          }
          timeline.seek(initialTrajectoryPointAnimationTime);
        }
      }
    );

    const unsubscribePosition = useStore.subscribe(
      (state) => state.paperPlane,
      ({ position }) => {
        if (position != null) {
          positionRef.current = position;
          group.current && group.current.position.set(...positionRef.current);
        }
      }
    );

    const unsubscribeRotation = useStore.subscribe(
      (state) => state.paperPlane,
      ({ axis, angle }) => {
        if (axis != null && angle != null) {
          group.current &&
            group.current.quaternion.setFromAxisAngle(axis, angle);
        }
      }
    );

    //Remove event listeners and subscriptions
    return () => {
      // divContainer.removeEventListener("wheel", onWheel);
      // window.removeEventListener("resize", onResize);
      unsubscribeAnimation();
      unsubscribeAnimationToInitialTrajectoryPoint();
      unsubscribePosition();
      unsubscribeRotation();
    };
  }, []);

  /** Anime JS timeline */
  const [timeline] = useState(() =>
    anime.timeline({
      autoplay: false,
      duration: 2000,
      easing: "easeOutSine",
    })
  );

  console.log("TIMELINE", timeline);

  useEffect(() => {
    if (group.current) {
      timeline.add({
        targets: group.current.quaternion,
        x: -0.0047017907484663505,
        y: 0.009403581496932701,
        z: 0,
        w: 0.9999447313820841,
        duration: 666.666,
      });
      timeline.add({
        targets: group.current.position,
        x: -0.004043493877883724,
        y: -0.002021746938941862,
        z: 694.5603454848316,
        duration: 666.666,
      });
      timeline.add({
        targets: camera.position,
        x: camera.position.x,
        y: camera.position.y,
        z: camera.position.z + 10,
        duration: 666.666,
      });
    }
  }, [group.current]);

  return (
    <group
      scale={[scaleFactor, scaleFactor, scaleFactor]}
      rotation={[rotationX, rotationY, rotationZ]}
      position={positionRef.current}
      ref={group}
      {...props}
      dispose={null}
    >
      <mesh
        layers={2}
        name="Plane_1"
        geometry={nodes.Plane_1.geometry}
        material={materials.back}
        morphTargetDictionary={nodes.Plane_1.morphTargetDictionary}
        morphTargetInfluences={nodes.Plane_1.morphTargetInfluences}
      ></mesh>
      <mesh
        layers={2}
        name="Plane_2"
        geometry={nodes.Plane_2.geometry}
        material={materials.side}
        morphTargetDictionary={nodes.Plane_2.morphTargetDictionary}
        morphTargetInfluences={nodes.Plane_2.morphTargetInfluences}
      >
        <meshStandardMaterial color={"#fff"} />
      </mesh>
      <mesh
        layers={2}
        name="Plane_3"
        geometry={nodes.Plane_3.geometry}
        material={materials.front}
        morphTargetDictionary={nodes.Plane_3.morphTargetDictionary}
        morphTargetInfluences={nodes.Plane_3.morphTargetInfluences}
      >
        <meshStandardMaterial color={"#fff"} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/ekzotik.glb");
