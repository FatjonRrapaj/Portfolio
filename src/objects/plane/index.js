/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useControls } from "leva";

export default function Model({ ...props }) {
  const group = useRef();
  const plane = useRef();
  const { nodes, materials, animations } = useGLTF("/plane.glb");
  const { actions } = useAnimations(animations, group);

  /**
   * Plane controls
   */

  const { scaleFactor, color, positionX, positionY, positionZ, wireframe } =
    useControls("plane", {
      scaleFactor: {
        value: 0.1,
        min: 0.1,
        max: 2,
        step: 0.5,
      },
      color: "#FF0000",
      positionX: {
        value: 0,
        min: -100,
        max: 100,
        step: 0.1,
      },
      positionY: {
        value: 0,
        min: -100,
        max: 100,
        step: 0.1,
      },
      positionZ: {
        value: 0,
        min: -100,
        max: 100,
        step: 0.1,
      },
      rotationX: {
        value: 0,
        step: Math.PI / 4,
        min: -1000,
        max: 1000,
        onChange: (val) => plane.current && plane.current.rotateX(val),
      },
      rotationY: {
        value: 0,
        step: Math.PI / 4,
        min: -1000,
        max: 1000,
        onChange: (val) => plane.current && plane.current.rotateY(val),
      },
      rotationZ: {
        value: 0,
        step: Math.PI / 4,
        min: -1000,
        max: 1000,
        onChange: (val) => plane.current && plane.current.rotateZ(val),
      },
      wireframe: false,
    });

  useEffect(() => {
    const { foldAnimation } = actions;
    foldAnimation.repetitions = 1;
    foldAnimation.clampWhenFinished = true;
    foldAnimation.play();
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        scale={[scaleFactor, scaleFactor, scaleFactor]}
        rotation={[positionX, positionY, positionZ, "XYZ"]}
        ref={plane}
        name="Plane"
        geometry={nodes.Plane.geometry}
        material={materials.Material}
        morphTargetDictionary={nodes.Plane.morphTargetDictionary}
        morphTargetInfluences={nodes.Plane.morphTargetInfluences}
      >
        {/* <meshBasicMaterial
          wireframe={wireframe}
          color={color}
        ></meshBasicMaterial> */}
      </mesh>
    </group>
  );
}

useGLTF.preload("/plane.glb");
