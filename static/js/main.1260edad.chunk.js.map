{"version":3,"sources":["globals.js","reportWebVitals.js","objects/world/createPath.js","store/object.js","store/index.js","objects/planet/sky/index.jsx","objects/planet/floor/sphere.jsx","objects/shaders/noiseShader.js","objects/planet/floor/index.jsx","objects/planet/index.jsx","objects/components/directionalLight/index.js","objects/paperPlane/index.jsx","objects/fatstronaut/index.jsx","objects/brain/index.jsx","objects/stars/index.jsx","postprocessing/index.js","objects/paragraphs/TimeDefinition.jsx","objects/paragraphs/CreativityDefinition.jsx","objects/world/index.jsx","helpers/animation.js","scene/index.js","index.js"],"names":["window","progressSteps","planeFold","start","end","planeToLineStart","planeMove","fatstronaut","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createSpiralPathFromCoordinateWithRadius","coordinate","radius","spirals","heightDivider","direction","vector3Array","x","y","z","i","yCord","push","THREE","useObject","set","get","key","position","rotation","rotationAngle","animationTime","initialTrajectoryPointAnimationTime","lastChanged","progress","scaleFactor","scrollY","scrollingStopped","move","state","rotate","setRotationAngle","setScaleFactor","setAnimationTime","setInitialTrajectoryPointAnimationTime","setScrollY","setProgress","sameProgress","setScrollingStopped","useStore","create","subscribeWithSelector","Sky","innerSky","useRef","outerSky","useState","anime","timeline","autoplay","duration","easing","useEffect","current","add","targets","material","opacity","subscribe","world","localProgress","began","completed","seek","useFrame","scale","layers","ref","args","side","transparent","color","flatShading","wireframe","emissive","emissiveIntensity","Math","PI","Sphere","offset","detail","polygonOffsetFactor","polygonOffsetUnits","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","roughness","attach","onBeforeCompile","shader","vertexShader","replace","uniforms","uNoiseFactor","value","uPosotionNoiseFactor","polygonOffset","Floor","sphericFloor","useThree","camera","name","Planet","planetRef","unsubscribeStore","scaleFator","DirectionalLight","castShadow","intensity","PaperPlane","props","group","useGLTF","process","nodes","materials","animations","actions","useAnimations","front","useLoader","flipY","back","alphaMap","positionRef","fold","reset","setLoop","setDuration","_mixer","time","clampWhenFinished","play","unsubscribePaperPlaneChanges","paperPlane","setTime","quaternion","setFromAxisAngle","axis","angle","w","dispose","geometry","Plane_1","receiveShadow","morphTargetDictionary","morphTargetInfluences","metalness","map","depthTest","alphaTest","Plane_2","Plane_3","Fatstronaut","scene","center","setFromObject","getCenter","clock","sin","getElapsedTime","body","Sphere008","Sphere008_1","specchio","feet","_tubes","wearableTubes","jet","triangulatedTubes","leftHand","Brain","brain","brainMesh","brainMeshWireframe","preload","Stars","starTexture","useMemo","positions","Float32Array","count","colors","random","particlesGeometry","setAttribute","particlesMaterial","size","depthWrite","blending","vertexColors","extend","EffectComposer","ShaderPass","RenderPass","Effect","gl","effectComposer","renderScene","toneMappingExposure","pow","autoClear","antialias","finalComposer","unrealBloomPass","UnrealBloomPass","Vector2","width","height","addPass","setSize","clear","render","clearDepth","TimeDefinition","timeDef","unsubscribeProgress","style","Html","transform","CreativityDefiniton","creativityDef","World","isScrolling","points","c","tension","arcLengthDivisions","curveType","closed","line","setFromPoints","getSpacedPoints","divContainer","document","getElementById","maxHeight","clientHeight","innerHeight","percentage","touchStartY","event","deltaY","onResize","onWheel","e","evt","wheelDeltaY","clearTimeout","getState","setTimeout","scroll","t","up","movePlane","fraction","isBackward","moveCamera","point","getPoint","tangent","getTangent","crossVectors","normalize","radians","acos","dot","oldProgress","Infinity","handleProgress","animatePlane","animatePlaneToInitialTrajectoryPoint","prevCameraPosition","cameraX","cameraY","cameraZ","xFactor","zoomProgress","min","max","onTouchStart","targetTouches","pageY","onTouchMove","scrollIntoView","addEventListener","passive","unSubscribeWorldChanges","removeEventListener","fallback","Stats","Scene","canvas","id","className","shadows","far","near","fov","aspect","innerWidth","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.1260edad.chunk.js","sourcesContent":["const progressSteps = {\n  planeFold: {\n    start: 0,\n    end: 15000,\n  },\n  planeToLineStart: {\n    start: 15000,\n    end: 17000,\n  },\n  planeMove: {\n    start: 17000,\n  },\n  fatstronaut: {\n    start: 20000,\n    end: 35000,\n  },\n};\n\nwindow.progressSteps = progressSteps;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as THREE from \"three\";\n\nfunction createSpiralPathFromCoordinateWithRadius({\n  coordinate = [0, 0, 0],\n  radius = 1,\n  spirals = 5,\n  heightDivider = 2,\n  direction = -1,\n}) {\n  let vector3Array = [];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  const z = coordinate[2];\n  for (let i = 0; i < spirals; i++) {\n    const yCord = y + (radius / heightDivider) * direction * i;\n    vector3Array.push(new THREE.Vector3(x, yCord, z));\n    vector3Array.push(new THREE.Vector3(x - radius, yCord, z + radius));\n    vector3Array.push(new THREE.Vector3(x, yCord, z + radius * 2));\n    vector3Array.push(new THREE.Vector3(x + radius, yCord, z + radius));\n  }\n\n  // console.log(\n  //   \"LAST POSITION OF THE SPIRAL PATH\",\n  //   vector3Array[vector3Array.length - 1]\n  // );\n\n  return vector3Array;\n}\n\nexport default createSpiralPathFromCoordinateWithRadius;\n","const useObject = (set, get, key) => {\n  return {\n    [key]: {\n      position: null,\n      rotation: null,\n      rotationAngle: null,\n      animationTime: null,\n      initialTrajectoryPointAnimationTime: null,\n      lastChanged: null,\n      progress: null,\n      scaleFactor: null,\n      scrollY: null,\n      scrollingStopped: null,\n\n      move(position) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"position\",\n            position,\n          },\n        }));\n      },\n      rotate(rotation) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"rotation\",\n            rotation,\n          },\n        }));\n      },\n      setRotationAngle(rotationAngle) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"rotationAngle\",\n            rotationAngle,\n          },\n        }));\n      },\n      setScaleFactor(scaleFactor) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"scaleFactor\",\n            scaleFactor,\n          },\n        }));\n      },\n      setAnimationTime(animationTime) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"animationTime\",\n            animationTime,\n          },\n        }));\n      },\n      setInitialTrajectoryPointAnimationTime(\n        initialTrajectoryPointAnimationTime\n      ) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"initialTrajectoryPointAnimationTime\",\n            initialTrajectoryPointAnimationTime,\n          },\n        }));\n      },\n      setScrollY(scrollY) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"scrollY\",\n            scrollY,\n          },\n        }));\n      },\n      setProgress(progress) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"progress\",\n            sameProgress: state.progress === progress,\n            progress,\n          },\n        }));\n      },\n      setScrollingStopped(scrollingStopped) {\n        set((state) => ({\n          [key]: {\n            ...state[key],\n            lastChanged: \"scrollingStopped\",\n            scrollingStopped,\n          },\n        }));\n      },\n    },\n  };\n};\n\nexport default useObject;\n","import create from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nimport useObject from \"./object\";\n\nconst useStore = create(\n  subscribeWithSelector((set, get) => ({\n    ...useObject(set, get, \"world\"),\n    ...useObject(set, get, \"floor\"),\n    ...useObject(set, get, \"paperPlane\"),\n    ...useObject(set, get, \"fatstronaut\"),\n    ...useObject(set, get, \"sky\"),\n    ...useObject(set, get, \"camera\"),\n  }))\n);\n\nexport default useStore;\n","import { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport anime from \"animejs/lib/anime.es.js\";\n\nimport { useControls } from \"leva\";\nimport useStore from \"../../../store\";\n\nconst Sky = () => {\n  const innerSky = useRef();\n  const outerSky = useRef();\n\n  // const {\n  //   color,\n  //   wireframe,\n  //   emissiveColor,\n  //   flatShading,\n  //   emissiveIntensity,\n  //   x,\n  //   y,\n  //   z,\n  //   radius,\n  //   detail,\n  //   autoRotate,\n  //   scaleFactor,\n  // } = useControls(\"Sky\", {\n  //   x: {\n  //     min: -1000,\n  //     max: 1000,\n  //     value: 0,\n  //     step: 0.1,\n  //   },\n  //   y: {\n  //     min: -1000,\n  //     max: 1000,\n  //     value: 0,\n  //     step: 0.1,\n  //   },\n  //   z: {\n  //     min: -2000,\n  //     max: 2000,\n  //     value: -550,\n  //     step: 0.1,\n  //   },\n  //   radius: {\n  //     min: 400,\n  //     max: 1000,\n  //     step: 1,\n  //     value: 500,\n  //   },\n  //   detail: {\n  //     min: 1,\n  //     max: 1000,\n  //     value: 400,\n  //     step: 1,\n  //   },\n  //   emissiveIntensity: {\n  //     min: 0.1,\n  //     max: 100,\n  //     value: 5.0,\n  //     step: 0.1,\n  //   },\n  //   color: \"#ffffff\",\n  //   emissiveColor: \"#ffffff\",\n  //   wireframe: true,\n  //   flatShading: false,\n  //   autoRotate: true,\n  //   scaleFactor: {\n  //     min: 0.1,\n  //     max: 2,\n  //     value: 0.8,\n  //     step: 0.01,\n  //   },\n  // });\n\n  /** Anime JS timeline */\n  const [timeline] = useState(() =>\n    anime.timeline({\n      autoplay: false,\n      duration: 1000,\n      easing: \"easeOutSine\",\n    })\n  );\n\n  useEffect(() => {\n    if (outerSky.current) {\n      timeline.add({\n        targets: outerSky.current.material,\n        opacity: 0,\n        duration: 1000,\n      });\n\n      useStore.subscribe(\n        (state) => state.world,\n        ({ progress }) => {\n          if (progress > 42320) {\n            const localProgress = progress - 42320;\n            if (timeline.began && timeline.completed) {\n              timeline.completed = false;\n            }\n            timeline.seek(localProgress);\n          }\n        }\n      );\n    }\n  }, [outerSky.current]);\n\n  useFrame(() => {\n    if (innerSky.current) {\n      innerSky.current.rotation.x += 0.0006;\n    }\n  });\n\n  return (\n    <>\n      <mesh scale={[0.8, 0.8, 0.8]} layers={1} ref={outerSky}>\n        <sphereBufferGeometry args={[500, 1000, 1000]} />\n        <meshStandardMaterial\n          ref={outerSky}\n          side={THREE.DoubleSide}\n          transparent={true}\n          opacity={1}\n          color=\"#ffffff\"\n          flatShading={false}\n          wireframe={true}\n          emissive=\"#ffffff\"\n          emissiveIntensity={2.0}\n        />\n      </mesh>\n      <mesh\n        ref={innerSky}\n        scale={[0.8, 0.8, 0.8]}\n        rotation={[0, 0, Math.PI / 2]}\n        layers={1}\n      >\n        <sphereBufferGeometry args={[500, 100, 50]} />\n        <meshStandardMaterial\n          side={THREE.DoubleSide}\n          color=\"#ffffff\"\n          flatShading={false}\n          wireframe={true}\n          emissive=\"#ffffff\"\n          emissiveIntensity={0.1}\n        />\n      </mesh>\n    </>\n  );\n};\n\nexport default Sky;\n","import React, { useEffect, useState, useRef, forwardRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useControls } from \"leva\";\nimport noiseShader from \"../../shaders/noiseShader\";\n\nfunction Sphere({\n  offset = 0,\n  radius,\n  detail,\n  polygonOffsetFactor,\n  polygonOffsetUnits,\n  opacity,\n  wireframeLinewidth,\n  wireframeLinecap,\n  wireframeLinejoin,\n  roughness,\n  wireframe,\n  color,\n}) {\n  const material = useRef();\n\n  let materialShader;\n\n  /**\n   * Sphere Controls\n   */\n\n  // useControls(\"SPHERE\", {\n  //   noiseFactor: {\n  //     value: 80,\n  //     min: 0.0,\n  //     max: 500.0,\n  //     onChange: function onNoiseFactorChange(n) {\n  //       if (materialShader) {\n  //         materialShader.uniforms.uNoiseFactor.value = n.toFixed(1);\n  //       }\n  //     },\n  //   },\n\n  //   uPosotionNoiseFactor: {\n  //     value: 0.0,\n  //     min: 0.0,\n  //     max: 500.0,\n  //     onChange: function onPositionNoiseFactorChange(n) {\n  //       if (materialShader) {\n  //         materialShader.uniforms.uPosotionNoiseFactor.value = n.toFixed(1);\n  //       }\n  //     },\n  //   },\n  // });\n\n  return (\n    <mesh\n      // receiveShadow={true}\n      layers={1}\n    >\n      <icosahedronBufferGeometry\n        attach=\"geometry\"\n        args={[radius + offset, detail]}\n      />\n      <meshStandardMaterial\n        ref={material}\n        side={THREE.DoubleSide}\n        color={color}\n        flatShading={!wireframe}\n        wireframe={wireframe}\n        // map={texture}\n        opacity={opacity}\n        onBeforeCompile={(shader) => {\n          // The perlin noise code goes here, above the main() function in the shader.\n          // Noise shader from https://github.com/ashima/webgl-noise.\n          shader.vertexShader = shader.vertexShader.replace(\n            \"#include <uv_pars_vertex>\",\n            noiseShader\n          );\n          /**\n           * Adding controls to existing glsl.\n           */\n          shader.uniforms = {\n            ...shader.uniforms,\n            uNoiseFactor: {\n              //80.0\n              value: 80.0,\n            },\n            uPosotionNoiseFactor: {\n              //5.0\n              value: 0,\n            },\n          };\n\n          shader.vertexShader =\n            \"uniform float uNoiseFactor;\\n\" +\n            \"uniform float uPosotionNoiseFactor;\\n\" +\n            shader.vertexShader;\n\n          // The vertex shader code that goes inside main() needs to be separate from the perlin noise code.\n          shader.vertexShader = shader.vertexShader.replace(\n            \"#include <worldpos_vertex>\",\n            `vUv = uv;\n                  noise = uNoiseFactor * turbulence(normal);\n                  float b = uPosotionNoiseFactor * pnoise(0.01 * position, vec3(100.0));\n                  float displacement = noise + b;\n                  vec3 newPosition = position + normal * displacement;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);`\n          );\n\n          materialShader = shader;\n        }}\n        transparent={opacity < 1}\n        polygonOffset={wireframe}\n        polygonOffsetFactor={polygonOffsetFactor}\n        polygonOffsetUnits={polygonOffsetUnits}\n        wireframeLinewidth={wireframeLinewidth}\n        wireframeLinecap={wireframeLinecap}\n        wireframeLinejoin={wireframeLinejoin}\n        emissive={color}\n        emissiveIntensity={wireframe ? 1 : 0.1}\n        roughness={roughness}\n      />\n    </mesh>\n  );\n}\n\nexport default Sphere;\n","const noiseShader = `varying vec2 vUv;\nvarying float noise;\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Noise code from https://www.clicktorelease.com/blog/vertex-displacement-noise-3d-webgl-glsl-three-js/\nfloat turbulence(vec3 p) {\n    float w = 100.0;\n    float t = -0.5;\n\n    for (float f = 1.0; f <= 10.0; f++) {\n        float power = pow(2.0, f);\n        t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n    }\n\n    return t;\n}\n`;\n\nexport default noiseShader;\n","import React, { useRef, createRef, useEffect, forwardRef } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { useControls } from \"leva\";\n\nimport Sphere from \"./sphere\";\n\nfunction Floor() {\n  const sphericFloor = useRef();\n\n  let cam = null;\n\n  /**\n   * Camera Controls\n   */\n  // useControls(\"camera\", {\n  //   positionX: {\n  //     value: 0,\n  //     min: -1000,\n  //     max: 1000,\n  //     step: 0.01,\n  //     onChange: (val) => {\n  //       cam.position.x = val;\n  //     },\n  //   },\n  //   positionY: {\n  //     value: 0,\n  //     min: -1000,\n  //     max: 1000,\n  //     step: 0.01,\n  //     onChange: (val) => {\n  //       cam.position.y = val;\n  //     },\n  //   },\n  //   positionZ: {\n  //     value: 700,\n  //     min: -2000,\n  //     max: 2000,\n  //     step: 0.01,\n  //     onChange: (val) => {\n  //       cam.position.z = val;\n  //     },\n  //   },\n\n  //   rotationX: {\n  //     value: 0,\n  //     step: Math.PI / 4,\n  //     min: -1000,\n  //     max: 1000,\n  //     onChange: (val) => {\n  //       cam.rotateX(val);\n  //     },\n  //   },\n  //   rotationY: {\n  //     value: 0,\n  //     step: Math.PI / 4,\n  //     min: -1000,\n  //     max: 1000,\n  //     onChange: (val) => {\n  //       cam.rotateY(val);\n  //     },\n  //   },\n  //   rotationZ: {\n  //     value: 0,\n  //     step: Math.PI / 4,\n  //     min: -1000,\n  //     max: 1000,\n  //     onChange: (val) => {\n  //       cam.rotateZ(val);\n  //     },\n  //   },\n  // });\n\n  useThree(({ camera }) => {\n    cam = camera;\n  });\n\n  /**\n   * SphericFloor controls\n   */\n  // const { autoRotate, scaleFactor } = useControls(\"sphericFloor\", {\n  //   autoRotate: false,\n  //   scaleFactor: {\n  //     min: 0.1,\n  //     max: 100,\n  //     value: 3.5,\n  //     step: 0.01,\n  //   },\n  // });\n\n  // const {\n  //   radius,\n  //   detail,\n  //   polygonOffsetFactor,\n  //   polygonOffsetUnits,\n  //   opacity,\n  //   positionX,\n  //   positionY,\n  //   positionZ,\n  //   wireframeLinewidth,\n  //   wireframeLinecap,\n  //   wireframeLinejoin,\n  //   roughness,\n  //   sphere1Color,\n  //   sphere2Color,\n  //   offset,\n  //   rotationSpeed,\n  //   sphere1WireFrame,\n  //   sphere2WireFrame,\n  // } = useControls(\"floorSphere\", {\n  //   sphere1Color: \"#00cfff\",\n  //   sphere2Color: \"#26ffa6\",\n  //   offset: 0.2,\n  //   radius: {\n  //     value: 199,\n  //     min: 1,\n  //     max: 500,\n  //     step: 10,\n  //   },\n  //   detail: {\n  //     value: 160,\n  //     min: 1,\n  //     max: 500,\n  //     step: 0.5,\n  //   },\n  //   opacity: {\n  //     value: 1,\n  //     max: 1,\n  //     min: 0,\n  //     step: 0.01,\n  //   },\n  //   polygonOffsetFactor: {\n  //     min: -100,\n  //     max: 100,\n  //     step: 1,\n  //     value: 1,\n  //   },\n  //   polygonOffsetUnits: {\n  //     min: -100,\n  //     max: 100,\n  //     step: 1,\n  //     value: 1,\n  //   },\n  //   wireframeLinewidth: {\n  //     min: -100,\n  //     max: 100,\n  //     step: 1,\n  //     value: 1,\n  //   },\n  //   wireframeLinecap: {\n  //     options: {\n  //       butt: \"butt\",\n  //       round: \"round\",\n  //       square: \"square\",\n  //     },\n  //     value: \"round\",\n  //   },\n  //   wireframeLinejoin: {\n  //     options: {\n  //       bevel: \"bevel\",\n  //       round: \"round\",\n  //       miter: \"miter\",\n  //     },\n  //     value: \"round\",\n  //   },\n  //   roughness: {\n  //     value: 0.8,\n  //     min: 0,\n  //     max: 1,\n  //     step: 0.01,\n  //   },\n  //   rotationSpeed: {\n  //     value: 0.05,\n  //     min: 0.001,\n  //     max: 1,\n  //     step: 0.001,\n  //   },\n  //   positionX: {\n  //     value: 0,\n  //     min: -1000,\n  //     max: 1000,\n  //     step: 0.01,\n  //   },\n  //   positionY: {\n  //     value: 0,\n  //     min: -100,\n  //     max: 100,\n  //     step: 0.01,\n  //   },\n  //   positionZ: {\n  //     value: -550,\n  //     min: -1500,\n  //     max: 2000,\n  //     step: 0.01,\n  //   },\n  //   rotationX: {\n  //     value: 0,\n  //     step: Math.PI / 4,\n  //     min: -1000,\n  //     max: 1000,\n  //   },\n  //   rotationY: {\n  //     value: 0,\n  //     step: Math.PI / 4,\n  //     min: -1000,\n  //     max: 1000,\n  //   },\n  //   rotationZ: {\n  //     value: 0,\n  //     step: Math.PI / 4,\n  //     min: -1000,\n  //     max: 1000,\n  //   },\n  //   sphere1WireFrame: false,\n  //   sphere2WireFrame: true,\n  // });\n\n  useFrame(() => {\n    if (sphericFloor.current) {\n      sphericFloor.current.rotation.x += 0.0003;\n    }\n  });\n\n  return (\n    <group scale={[1.5, 1.5, 1.5]} layers={1} ref={sphericFloor}>\n      <Sphere\n        radius={199}\n        detail={160}\n        opacity={1}\n        roughness={0.8}\n        color=\"#00cfff\"\n        wireframe={false}\n      />\n      <Sphere\n        radius={199}\n        detail={160}\n        opacity={1}\n        roughness={0.8}\n        name=\"Sphere2\"\n        wireframe={true}\n        offset={0.2}\n        color=\"#26ffa6\"\n      />\n    </group>\n  );\n}\n\nexport default Floor;\n","import { useEffect, useState, useRef } from \"react\";\nimport anime from \"animejs/lib/anime.es.js\";\n\nimport Sky from \"./sky\";\nimport Floor from \"./floor\";\n\nimport useStore from \"../../store\";\nimport { useFrame } from \"@react-three/fiber\";\n\nfunction Planet() {\n  const planetRef = useRef();\n\n  const [timeline] = useState(() =>\n    anime.timeline({\n      autoplay: false,\n      duration: 2000,\n      easing: \"easeOutSine\",\n    })\n  );\n\n  useEffect(() => {\n    if (planetRef.current) {\n      timeline.add({\n        targets: planetRef.current.scale,\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 2000,\n      });\n\n      const unsubscribeStore = useStore.subscribe(\n        (state) => state.world,\n        ({ progress }) => {\n          if (progress >= 34600) {\n            let localProgress = progress - 34600;\n            const scaleFator = localProgress / 7;\n            if (timeline.began && timeline.completed) {\n              timeline.completed = false;\n            }\n            timeline.seek(scaleFator);\n          }\n        }\n      );\n\n      return () => {\n        unsubscribeStore();\n      };\n    }\n  }, [planetRef.current]);\n\n  return (\n    <group position={[0, 0, -100]} ref={planetRef} scale={[0.1, 0.1, 0.1]}>\n      <Sky />\n      <Floor />\n    </group>\n  );\n}\n\nexport default Planet;\n","import React from \"react\";\nimport { useControls } from \"leva\";\n\nfunction DirectionalLight({ layers = 2, name = \"DirectionalLight\" }) {\n  // const { intensity, color, x, y, z } = useControls(name, {\n  //   color: \"#FFFFFF\",\n  //   intensity: {\n  //     min: 0.05,\n  //     max: 100,\n  //     step: 0.1,\n  //     value: 1,\n  //   },\n  //   x: {\n  //     min: -1000,\n  //     max: 1000,\n  //     value: 0,\n  //     step: 0.1,\n  //   },\n  //   y: {\n  //     min: -1000,\n  //     max: 1000,\n  //     value: 0,\n  //     step: 0.1,\n  //   },\n  //   z: {\n  //     min: -1000,\n  //     max: 1000,\n  //     value: 100,\n  //     step: 0.1,\n  //   },\n  // });\n\n  return (\n    <directionalLight\n      position={[0, 0, 100]}\n      color=\"#FFFFFF\"\n      castShadow={true}\n      layers={layers}\n      intensity={1}\n    />\n  );\n}\n\nexport default DirectionalLight;\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport { useRef, useEffect, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nimport { useFrame, useLoader, useThree } from \"@react-three/fiber\";\nimport { useControls } from \"leva\";\nimport anime from \"animejs/lib/anime.es.js\";\n\nimport useStore from \"../../store\";\n\nexport default function PaperPlane({ ...props }) {\n  const { camera } = useThree();\n\n  /** GLTF PaperPlane controls leva */\n  // const {\n  //   scaleFactor,\n  //   color,\n  //   positionX,\n  //   positionY,\n  //   positionZ,\n  //   wireframe,\n  //   rotationX,\n  //   rotationY,\n  //   rotationZ,\n  //   emissiveIntensity,\n  // } = useControls(\"plane\", {\n  //   scaleFactor: {\n  //     value: 10,\n  //     min: 0.1,\n  //     max: 100,\n  //     step: 0.5,\n  //   },\n  //   emissiveIntensity: {\n  //     min: 0,\n  //     max: 100,\n  //     value: 0,\n  //     step: 0.01,\n  //   },\n  //   color: \"#fff\",\n  //   positionX: {\n  //     value: 0,\n  //     min: -1000,\n  //     max: 1000,\n  //     step: 0.01,\n  //   },\n  //   positionY: {\n  //     value: 0,\n  //     min: -1000,\n  //     max: 1000,\n  //     step: 0.1,\n  //   },\n  //   positionZ: {\n  //     value: 697,\n  //     min: -1000,\n  //     max: 1000,\n  //     step: 0.1,\n  //   },\n  //   rotationX: {\n  //     value: Math.PI / 2,\n  //     step: 0.1,\n  //     min: -1000,\n  //     max: 1000,\n  //   },\n  //   rotationY: {\n  //     value: 0,\n  //     step: 0.1,\n  //     min: -1000,\n  //     max: 1000,\n  //   },\n  //   rotationZ: {\n  //     value: -Math.PI * 2,\n  //     step: 0.001,\n  //     min: -1000,\n  //     max: 1000,\n  //   },\n  //   wireframe: false,\n  // });\n\n  /** GLTF variables */\n  const group = useRef();\n  const { nodes, materials, animations } = useGLTF(\n    process.env.PUBLIC_URL + \"/ekzotik.glb\"\n  );\n  const { actions } = useAnimations(animations, group);\n\n  // /** GLTF PaperPlane textures */\n  const front = useLoader(\n    THREE.TextureLoader,\n    process.env.PUBLIC_URL + \"/front.jpg\"\n  );\n  front.flipY = false;\n  const back = useLoader(\n    THREE.TextureLoader,\n    process.env.PUBLIC_URL + \"/back.jpg\"\n  );\n  const alphaMap = useLoader(\n    THREE.TextureLoader,\n    process.env.PUBLIC_URL + \"/aMap.jpg\"\n  );\n\n  /** Store subscription handling */\n  const positionRef = useRef([0, 0, 697]);\n\n  useEffect(() => {\n    //Scroll & resize event listeners\n    // divContainer.addEventListener(\"wheel\", onWheel, false);\n    // window.addEventListener(\"resize\", onResize, { passive: true });\n\n    //GLTF animation\n    const { fold } = actions;\n    fold.reset();\n    fold.setLoop(THREE.LoopOnce, 1);\n    fold.setDuration(18000);\n    fold._mixer.time = 18000;\n    fold.clampWhenFinished = true;\n    fold.play();\n\n    //Zustand store subscriptions\n    const unsubscribePaperPlaneChanges = useStore.subscribe(\n      (state) => state.paperPlane,\n      ({\n        animationTime,\n        initialTrajectoryPointAnimationTime,\n        position,\n        rotationAngle,\n        lastChanged,\n      }) => {\n        switch (lastChanged) {\n          case \"animationTime\":\n            if (animationTime <= 18000) {\n              fold._mixer.setTime(animationTime);\n            }\n            break;\n          case \"initialTrajectoryPointAnimationTime\":\n            if (timeline.began && timeline.completed) {\n              timeline.completed = false;\n            }\n            timeline.seek(initialTrajectoryPointAnimationTime);\n            break;\n          case \"position\":\n            group.current && group.current.position.set(...position);\n            break;\n          case \"rotationAngle\":\n            group.current.quaternion.setFromAxisAngle(\n              rotationAngle.axis,\n              rotationAngle.angle\n            );\n            break;\n          default:\n            break;\n        }\n      }\n    );\n\n    //Remove event listeners and subscriptions\n    return () => {\n      // divContainer.removeEventListener(\"wheel\", onWheel);\n      // window.removeEventListener(\"resize\", onResize);\n      unsubscribePaperPlaneChanges();\n    };\n  }, []);\n\n  /** Anime JS timeline */\n  const [timeline] = useState(() =>\n    anime.timeline({\n      autoplay: false,\n      duration: 2000,\n      easing: \"easeOutSine\",\n    })\n  );\n\n  useEffect(() => {\n    if (group.current) {\n      timeline.add({\n        targets: group.current.quaternion,\n        x: -0.0047017907484663505,\n        y: 0.009403581496932701,\n        z: 0,\n        w: 0.9999447313820841,\n        duration: 666.666,\n      });\n      timeline.add({\n        targets: group.current.position,\n        x: -0.004043493877883724,\n        y: -0.002021746938941862,\n        z: 694.5603454848316,\n        duration: 666.666,\n      });\n      timeline.add({\n        targets: camera.position,\n        x: camera.position.x,\n        y: camera.position.y,\n        z: camera.position.z + 10,\n        duration: 666.666,\n      });\n    }\n  }, [group.current]);\n\n  return (\n    <group\n      scale={[10, 10, 10]}\n      rotation={[Math.PI / 2, 0, -Math.PI * 2]}\n      position={positionRef.current}\n      ref={group}\n      {...props}\n      dispose={null}\n    >\n      <mesh\n        layers={2}\n        name=\"Plane_1\"\n        geometry={nodes.Plane_1.geometry}\n        // material={materials.back}\n        castShadow={true}\n        receiveShadow={true}\n        morphTargetDictionary={nodes.Plane_1.morphTargetDictionary}\n        morphTargetInfluences={nodes.Plane_1.morphTargetInfluences}\n      >\n        <meshStandardMaterial\n          {...materials.back}\n          alphaMap={alphaMap}\n          roughness={1}\n          metalness={0.4}\n          map={back}\n          transparent={true}\n          depthTest={true}\n          alphaTest={0.5}\n          side={THREE.FrontSide}\n        />\n      </mesh>\n      <mesh\n        layers={2}\n        name=\"Plane_2\"\n        geometry={nodes.Plane_2.geometry}\n        material={materials.side}\n        morphTargetDictionary={nodes.Plane_2.morphTargetDictionary}\n        morphTargetInfluences={nodes.Plane_2.morphTargetInfluences}\n      >\n        <meshStandardMaterial color={\"#fff\"} />\n      </mesh>\n      <mesh\n        layers={2}\n        name=\"Plane_3\"\n        geometry={nodes.Plane_3.geometry}\n        morphTargetDictionary={nodes.Plane_3.morphTargetDictionary}\n        morphTargetInfluences={nodes.Plane_3.morphTargetInfluences}\n      >\n        <meshStandardMaterial\n          {...materials.front}\n          side={THREE.FrontSide}\n          roughness={1}\n          metalness={0.4}\n          map={front}\n          transparent={true}\n          alphaMap={alphaMap}\n        />\n      </mesh>\n    </group>\n  );\n}\n\nuseGLTF.preload(process.env.PUBLIC_URL + \"/ekzotik.glb\");\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useGLTF } from \"@react-three/drei\";\n\nexport default function Fatstronaut({ ...props }) {\n  const group = useRef();\n\n  const { nodes, materials, scene } = useGLTF(\n    process.env.PUBLIC_URL + \"/fatstronaut.glb\"\n  );\n\n  useEffect(() => {\n    //center gltf\n    const box = new THREE.Box3().setFromObject(scene);\n    const center = box.getCenter(new THREE.Vector3());\n\n    scene.position.x += scene.position.x - center.x;\n    scene.position.y += scene.position.y - center.y;\n    scene.position.z += scene.position.z - center.z;\n  }, []);\n\n  useFrame(({ clock }) => {\n    if (group.current) {\n      group.current.rotation.y = group.current.rotation.z =\n        Math.sin(clock.getElapsedTime() * 0.07) * 0.7;\n    }\n  });\n\n  return (\n    <group\n      position={[-200, 0, 500]}\n      scale={[4, 4, 4]}\n      ref={group}\n      {...props}\n      dispose={null}\n    >\n      <mesh\n        layers={2}\n        geometry={nodes.body.geometry}\n        material={materials[\"Material.001\"]}\n      />\n      <group\n        position={[0.11, 3.19, -1.44]}\n        rotation={[0.02, -0.01, 0.02]}\n        scale={0.92}\n      >\n        <mesh\n          layers={2}\n          geometry={nodes.Sphere008.geometry}\n          material={nodes.Sphere008.material}\n        />\n        <mesh\n          layers={2}\n          geometry={nodes.Sphere008_1.geometry}\n          material={materials.specchio}\n        />\n      </group>\n      <mesh\n        layers={2}\n        geometry={nodes.feet.geometry}\n        material={nodes.feet.material}\n      />\n      <mesh\n        layers={2}\n        geometry={nodes._tubes.geometry}\n        material={nodes._tubes.material}\n        position={[0.63, 4.16, -0.09]}\n        rotation={[0.14, -1.24, 0.7]}\n        scale={0.36}\n      />\n      <mesh\n        layers={2}\n        geometry={nodes.wearableTubes.geometry}\n        material={nodes.wearableTubes.material}\n        position={[0.11, 3.31, -1.5]}\n        rotation={[0.02, -0.01, 0.02]}\n        scale={0.87}\n      />\n      <mesh\n        layers={2}\n        geometry={nodes.jet.geometry}\n        material={nodes.jet.material}\n        position={[0.1, 3.08, -2.15]}\n        rotation={[1.59, 0.02, 0.01]}\n        scale={[0.79, 1.01, 1.01]}\n      />\n      <mesh\n        layers={2}\n        geometry={nodes.triangulatedTubes.geometry}\n        material={materials[\"tuta metallico.001\"]}\n        position={[0.63, 4.16, -0.09]}\n        rotation={[0.14, -1.24, 0.7]}\n        scale={0.36}\n      />\n      <mesh\n        layers={2}\n        geometry={nodes.leftHand.geometry}\n        material={nodes.leftHand.material}\n      />\n    </group>\n  );\n}\n\nuseGLTF.preload(process.env.PUBLIC_URL + \"/fatstronaut.glb\");\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useGLTF } from \"@react-three/drei\";\n\nexport default function Brain({ ...props }) {\n  const brain = useRef();\n  const brainMesh = useRef();\n  const brainMeshWireframe = useRef();\n  const { nodes, materials, scene } = useGLTF(\n    process.env.PUBLIC_URL + \"/brain.glb\"\n  );\n\n  useEffect(() => {\n    //center gltf\n    const box = new THREE.Box3().setFromObject(scene);\n    const center = box.getCenter(new THREE.Vector3());\n\n    scene.position.x += scene.position.x - center.x;\n    scene.position.y += scene.position.y - center.y;\n    scene.position.z += scene.position.z - center.z;\n  }, []);\n\n  // let prevTime;\n  useFrame(({ clock }) => {\n    if (brain.current) {\n      brain.current.rotation.y += 0.003;\n      brain.current.position.y = Math.sin(clock.getElapsedTime() * 0.5);\n    }\n    // if (brainMesh.current && brainMeshWireframe.current) {\n    //   let roundedTime = Math.round(clock.getElapsedTime());\n    //   if (roundedTime % 2 === 0) {\n    //     if (prevTime !== roundedTime) {\n    //       const r = Math.floor(Math.random() * 255);\n    //       const g = Math.floor(Math.random() * 255);\n    //       const b = Math.floor(Math.random() * 255);\n    //       const r1 = Math.floor(Math.random() * 255);\n    //       const g1 = Math.floor(Math.random() * 255);\n    //       const b1 = Math.floor(Math.random() * 255);\n    //       const brainColor = new THREE.Color(`rgb(${r},${g},${b})`);\n    //       console.log(\"brainColor: \", brainColor);\n    //       const wireColor = new THREE.Color(`rgb(${r1},${g1},${b1})`);\n    //       console.log(\"wireColor: \", wireColor);\n\n    //       brainMesh.current.material.emissive = brainColor;\n    //       brainMesh.current.material.color = brainColor;\n\n    //       brainMeshWireframe.current.material.emissive = wireColor;\n    //       brainMeshWireframe.current.material.color = wireColor;\n    //     }\n    //     prevTime = roundedTime;\n    //   }\n    // }\n  });\n\n  return (\n    <group\n      ref={brain}\n      position={[200, 0, 450]}\n      scale={[5, 5, 5]}\n      {...props}\n      dispose={null}\n    >\n      <mesh\n        layers={1}\n        scale={[1.001, 1.001, 1.001]}\n        ref={brainMeshWireframe}\n        geometry={nodes.brain.geometry}\n      >\n        <meshPhysicalMaterial\n          {...materials.material}\n          wireframe={true}\n          roughness={0.2}\n          metalness={0.2}\n          color=\"#D98BB6\"\n          emissive=\"#D98BB6\"\n          emissiveIntensity={0.8}\n        />\n      </mesh>\n\n      <mesh layers={1} ref={brainMesh} geometry={nodes.brain.geometry}>\n        <meshPhysicalMaterial\n          {...materials.material}\n          transparent={false}\n          wireframe={false}\n          roughness={0.2}\n          metalness={0.2}\n          color=\"#071540\"\n          emissive=\"#071540\"\n          emissiveIntensity={0.2}\n        />\n      </mesh>\n    </group>\n  );\n}\n\nuseGLTF.preload(process.env.PUBLIC_URL + \"/brain.glb\");\n","import { useMemo } from \"react\";\nimport { useLoader } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n\nfunction Stars() {\n  const starTexture = useLoader(\n    THREE.TextureLoader,\n    process.env.PUBLIC_URL + \"/star.png\"\n  );\n\n  const { particlesMaterial, particlesGeometry } = useMemo(() => {\n    const count = 10000;\n    const distance = 1000;\n    const positions = new Float32Array(count * 3);\n    const colors = new Float32Array(count * 3);\n    for (let i = 0; i < count * 3; i++) {\n      positions[i] = (Math.random() - 0.3) * distance;\n      colors[i] = Math.random();\n    }\n    const particlesGeometry = new THREE.BufferGeometry();\n    particlesGeometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(positions, 3)\n    );\n    particlesGeometry.setAttribute(\n      \"color\",\n      new THREE.BufferAttribute(colors, 3)\n    );\n    // Material\n    const particlesMaterial = new THREE.PointsMaterial();\n    particlesMaterial.size = 1;\n    particlesMaterial.color = new THREE.Color(\"#ff88cc\");\n    particlesMaterial.transparent = true;\n    particlesMaterial.alphaMap = starTexture;\n    particlesMaterial.alphaTest = 0.01;\n    particlesMaterial.depthTest = false;\n    particlesMaterial.depthWrite = false;\n    particlesMaterial.blending = THREE.AdditiveBlending;\n    particlesMaterial.vertexColors = true;\n    return { particlesGeometry, particlesMaterial };\n  });\n\n  return (\n    <points\n      layers={1}\n      material={particlesMaterial}\n      geometry={particlesGeometry}\n    />\n  );\n}\n\nexport default Stars;\n","import { useEffect, useMemo } from \"react\";\nimport { WebGLRenderTarget, Vector2 } from \"three\";\nimport { extend, useFrame, useThree } from \"@react-three/fiber\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport { useControls } from \"leva\";\n\nextend({ EffectComposer, ShaderPass, RenderPass });\n\nfunction Effect() {\n  const { gl, scene, camera, size } = useThree();\n\n  useEffect(() => {}, []);\n\n  // /**\n  //  * Bloom Pass controls\n  //  */\n  // const { exposure, bloomThreshold, bloomRadius, bloomStrength } = useControls(\n  //   \"bloomPass\",\n  //   {\n  //     exposure: {\n  //       value: 1,\n  //       min: 0,\n  //       max: 5,\n  //       step: 0.01,\n  //     },\n  //     bloomThreshold: {\n  //       min: 0,\n  //       max: 1,\n  //       value: 0,\n  //       step: 0.01,\n  //     },\n  //     bloomRadius: {\n  //       min: 0,\n  //       max: 5,\n  //       step: 0.01,\n  //       value: 1,\n  //     },\n  //     bloomStrength: {\n  //       min: 0,\n  //       max: 5,\n  //       step: 0.01,\n  //       value: 1,\n  //     },\n  //   }\n  // );\n\n  const effectComposer = useMemo(() => {\n    const renderScene = new RenderPass(scene, camera);\n\n    //renderer exposure\n    gl.toneMappingExposure = Math.pow(1, 4.0);\n    gl.autoClear = false;\n    gl.antialias = true;\n\n    const finalComposer = new EffectComposer(gl);\n    const unrealBloomPass = new UnrealBloomPass(\n      //resolution,\n      //strength,\n      //radius,\n      //threshold\n      new Vector2(size.width, size.height),\n      1.5,\n      1,\n      0\n    );\n    finalComposer.addPass(renderScene);\n    finalComposer.addPass(unrealBloomPass);\n    return finalComposer;\n  }, []);\n\n  useEffect(() => {\n    effectComposer.setSize(size.width, size.height);\n  }, [effectComposer, size]);\n\n  useFrame(() => {\n    //APPLY EFFECTS TO A PARTICULAR LAYER.\n\n    gl.autoClear = false;\n    gl.clear();\n    camera.layers.set(1);\n    effectComposer.render();\n\n    gl.clearDepth();\n    camera.layers.set(2);\n    gl.render(scene, camera);\n\n    gl.clearDepth();\n    camera.layers.set(3);\n    gl.render(scene, camera);\n\n    gl.clearDepth();\n    camera.layers.set(0);\n    gl.render(scene, camera);\n  }, 1);\n\n  return null;\n}\n\nexport default Effect;\n","import { useRef, useEffect } from \"react\";\nimport { Html } from \"@react-three/drei\";\n\nimport useStore from \"../../store\";\n\nfunction TimeDefinition() {\n  const timeDef = useRef();\n\n  useEffect(() => {\n    const unsubscribeProgress = useStore.subscribe(\n      (state) => state.world,\n      ({ progress }) => {\n        if (progress > 20760 && progress < 26262) {\n          if (timeDef.current) {\n            timeDef.current.style.opacity = 1;\n          }\n        } else {\n          if (timeDef.current) {\n            timeDef.current.style.opacity = 0;\n          }\n        }\n      }\n    );\n\n    return () => {\n      unsubscribeProgress();\n    };\n  }, []);\n\n  return (\n    <Html\n      ref={timeDef}\n      style={{ opacity: 0 }}\n      transform\n      position={[-165, 15, 490]}\n      scale={[3, 3, 3]}\n    >\n      <h1 style={{ color: \"white\" }}>Time</h1>\n      <h2 style={{ color: \"white\" }}>/tʌɪm/</h2>\n      <h3 style={{ color: \"white\" }}>Time is valuable</h3>\n      <p style={{ color: \"white\" }}>\n        With time we grow smarter, or fatter (or both)\n      </p>\n      <p style={{ color: \"white\" }}>\n        If you just want to download my resume, press [SPACE]\n      </p>\n\n      <p style={{ color: \"white\" }}>Otherwise, keep scrolling</p>\n      {/* <div style={{ width: \"100%\", height: 2, color: \"white\" }} />\n      <p style={{ color: \"white\" }}>\n        \"Spaceman Model\" (https://skfb.ly/WB6J) by likesenape is licensed under\n        Creative Commons Attribution\n        (http://creativecommons.org/licenses/by/4.0/).\n      </p> */}\n    </Html>\n  );\n}\n\nexport default TimeDefinition;\n","import { useRef, useEffect } from \"react\";\nimport { Html } from \"@react-three/drei\";\n\nimport useStore from \"../../store\";\n\nfunction CreativityDefiniton() {\n  const creativityDef = useRef();\n\n  useEffect(() => {\n    const unsubscribeProgress = useStore.subscribe(\n      (state) => state.world,\n      ({ progress }) => {\n        if (progress > 27300 && progress < 33611) {\n          if (creativityDef.current) {\n            creativityDef.current.style.opacity = 1;\n          }\n        } else {\n          if (creativityDef.current) {\n            creativityDef.current.style.opacity = 0;\n          }\n        }\n      }\n    );\n\n    return () => {\n      unsubscribeProgress();\n    };\n  }, []);\n\n  return (\n    <Html\n      ref={creativityDef}\n      style={{ opacity: 0 }}\n      transform\n      position={[170, 12, 430]}\n      scale={[3, 3, 3]}\n    >\n      <h1 style={{ color: \"white\" }}>Creativity</h1>\n      <h2 style={{ color: \"white\" }}>/ˌkriːeɪˈtɪvɪti/</h2>\n      <h3 style={{ color: \"white\" }}>\n        The special ingredient to problem solving\n      </h3>\n      <p style={{ color: \"white\" }}>Providing solutions is good</p>\n      <p style={{ color: \"white\" }}>\n        But providing solutions in fashion is better\n      </p>\n      <p style={{ color: \"white\" }}>\n        Being creative has helped me build and optimise\n      </p>\n      <p style={{ color: \"white\" }}>\n        some of the projects that you're about to see\n      </p>\n      <p style={{ color: \"white\" }}>For more, keep scrolling</p>\n      {/* <div style={{ width: \"100%\", height: 2, color: \"white\" }} />\n      <p style={{ color: \"white\" }}>\n        \"Brain Model\" (https://skfb.ly/WB6J) by likesenape is licensed under\n        Creative Commons Attribution\n        (http://creativecommons.org/licenses/by/4.0/).\n      </p> */}\n    </Html>\n  );\n}\n\nexport default CreativityDefiniton;\n","import { Suspense, useState, useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport { Stats } from \"@react-three/drei\";\n\nimport { lerp } from \"../../helpers/animation\";\nimport createSpiralPathFromCoordinateWithRadius from \"./createPath\";\n\nimport Planet from \"../planet\";\nimport DirectionalLight from \"../components/directionalLight\";\nimport PaperPlane from \"../paperPlane\";\nimport Fatstronaut from \"../fatstronaut\";\nimport Brain from \"../brain\";\nimport Stars from \"../stars\";\nimport Effect from \"../../postprocessing\";\n\n//Paragraphs\nimport TimeDefinition from \"../paragraphs/TimeDefinition\";\nimport CreativityDefiniton from \"../paragraphs/CreativityDefinition\";\n\nimport useStore from \"../../store\";\n\nconst World = () => {\n  const { camera } = useThree();\n\n  /** Line */\n  const [points] = useState(() => {\n    return [\n      new THREE.Vector3(0, 0, 697),\n      new THREE.Vector3(10, 2, 640.0),\n      new THREE.Vector3(-10, -1, 600.0),\n      new THREE.Vector3(-40, -5, 580),\n      new THREE.Vector3(-100, 12, 550),\n      ...createSpiralPathFromCoordinateWithRadius({\n        coordinate: [-200, 15, 490],\n        radius: 15,\n        spirals: 3,\n        heightDivider: 3,\n      }),\n      new THREE.Vector3(-185, 0, 505),\n      new THREE.Vector3(-100, 2, 505),\n      new THREE.Vector3(50, 0, 500),\n      ...createSpiralPathFromCoordinateWithRadius({\n        coordinate: [200, 4, 430],\n        direction: 1,\n        radius: 16,\n        spirals: 3,\n        heightDivider: 3,\n      }),\n      new THREE.Vector3(100, 4, 400),\n      new THREE.Vector3(50, -4, 380),\n      new THREE.Vector3(0, 4, 380),\n      new THREE.Vector3(0, 0, 350),\n      new THREE.Vector3(0, 10, 300),\n      new THREE.Vector3(0, 20, 270),\n      new THREE.Vector3(0, 30, 220),\n      new THREE.Vector3(0, 40, 200),\n      new THREE.Vector3(0, 40, 200),\n      new THREE.Vector3(0, 40, 200),\n      new THREE.Vector3(0, 30, 200),\n      new THREE.Vector3(0, 30, 200),\n      new THREE.Vector3(0, 30, 210),\n      new THREE.Vector3(0, 30, 200),\n      new THREE.Vector3(0, 30, 200),\n      new THREE.Vector3(0, 30, 200),\n      new THREE.Vector3(0, 90, 200),\n      new THREE.Vector3(0, 90, 170),\n      new THREE.Vector3(0, 90, 170),\n      new THREE.Vector3(0, 90, 100),\n      new THREE.Vector3(0, 130, 100),\n      new THREE.Vector3(0, 130, 100),\n      new THREE.Vector3(0, 130, 100),\n      new THREE.Vector3(0, 180, 50),\n      new THREE.Vector3(0, 180, 50),\n      new THREE.Vector3(0, 180, 150),\n      new THREE.Vector3(0, 180, 150),\n      new THREE.Vector3(0, 180, 150),\n      new THREE.Vector3(0, 1800, 100),\n      new THREE.Vector3(0, 1800, 100),\n    ];\n  });\n\n  const [line] = useState(() => {\n    const c = new THREE.CatmullRomCurve3(points);\n    c.tension = 1;\n    c.arcLengthDivisions = 20000;\n    c.curveType = \"catmullrom\";\n    c.closed = true;\n    return c;\n  });\n\n  const [lineGeometry] = useState(() =>\n    new THREE.BufferGeometry().setFromPoints(line.getSpacedPoints(20000))\n  );\n\n  /** Window event listener handlers */\n  const divContainer = document.getElementById(\"fold\");\n  var maxHeight = divContainer.clientHeight - window.innerHeight;\n  var percentage = 0;\n  var scrollY = 0;\n  var touchStartY = 0;\n  var event = {\n    y: 0,\n    deltaY: 0,\n  };\n\n  const onResize = () => {\n    maxHeight = divContainer.clientHeight - window.innerHeight;\n  };\n\n  let isScrolling;\n\n  function onWheel(e) {\n    var evt = event;\n    evt.deltaY = e.wheelDeltaY || e.deltaY * -1;\n    evt.deltaY *= 0.5;\n    clearTimeout(isScrolling);\n    useStore.getState().world.setScrollingStopped(false);\n    isScrolling = setTimeout(function () {\n      useStore.getState().world.setScrollingStopped(true);\n    }, 66);\n    scroll(e);\n  }\n\n  function scroll() {\n    var evt = event;\n    if (evt.y + evt.deltaY > 0) {\n      evt.y = 0;\n    } else if (-(evt.y + evt.deltaY) >= maxHeight) {\n      evt.y = -maxHeight;\n    } else {\n      evt.y += evt.deltaY;\n    }\n    scrollY = -evt.y;\n    useStore.getState().world.setScrollY(scrollY);\n    percentage = lerp(percentage, scrollY, 0.07);\n    useStore.getState().world.setProgress(percentage);\n  }\n\n  function animatePlane(percentage) {\n    useStore.getState().paperPlane.setAnimationTime(percentage);\n  }\n\n  function animatePlaneToInitialTrajectoryPoint(fraction) {\n    useStore\n      .getState()\n      .paperPlane.setInitialTrajectoryPointAnimationTime(fraction);\n  }\n\n  const up = new THREE.Vector3(0, 0, -1);\n  const axis = new THREE.Vector3();\n  function movePlane({ fraction, isBackward, moveCamera }) {\n    const point = line.getPoint(fraction);\n    const { x, y, z } = point;\n    useStore.getState().paperPlane.move([x, y, z]);\n    if (isBackward) {\n      up.z = 1;\n    } else {\n      up.z = -1;\n    }\n\n    const tangent = line.getTangent(fraction);\n    axis.crossVectors(up, tangent).normalize();\n    const radians = Math.acos(up.dot(tangent));\n    useStore.getState().paperPlane.setRotationAngle({ axis, angle: radians });\n    if (moveCamera) {\n      camera.position.set(...[x, y + 3, z + 10]);\n    }\n  }\n\n  let oldProgress = -Infinity;\n\n  function handleProgress(progress) {\n    // console.log(\"progress: \", progress);\n    let isBackward = false;\n    if (oldProgress > progress) {\n      isBackward = true;\n    } else {\n      isBackward = false;\n    }\n    oldProgress = progress;\n\n    if (progress <= 18000) {\n      animatePlane(progress);\n    } else if (progress > 18000 && progress <= 20000) {\n      const fraction = progress - 18000;\n      animatePlaneToInitialTrajectoryPoint(fraction);\n    } else if (progress > 18000) {\n      const localProgress = progress - 18000;\n      const fraction = localProgress / 30000;\n      let prevCameraPosition = camera.position;\n      if (progress > 20760 && progress <= 26262) {\n        //PLANE\n        movePlane({\n          fraction,\n          isBackward,\n          moveCamera: false,\n        });\n        const xFactor = isBackward ? 1 : -1;\n        const zFactor = 1;\n        let cameraX;\n        let cameraY;\n        let cameraZ;\n        const zoomProgress = localProgress / 50000;\n        if (isBackward) {\n          cameraX = Math.min(\n            -190,\n            prevCameraPosition.x + zoomProgress * xFactor\n          );\n        } else {\n          cameraX = Math.max(\n            -190,\n            prevCameraPosition.x + zoomProgress * xFactor\n          );\n        }\n        cameraY = camera.position.y;\n        cameraZ = Math.min(550, prevCameraPosition.z + zoomProgress * zFactor);\n        camera.position.set(...[cameraX, cameraY, cameraZ]);\n      } else if (progress > 26262 && progress <= 27300) {\n        //PLANE TO BRAIN\n        movePlane({\n          fraction,\n          isBackward,\n          moveCamera: true,\n        });\n      } else if (progress > 27300 && progress <= 33611) {\n        //BRAIN\n        movePlane({\n          fraction,\n          isBackward,\n          moveCamera: false,\n        });\n        const xFactor = isBackward ? 1 : -1;\n        const zFactor = 1;\n        let cameraX;\n        let cameraY;\n        let cameraZ;\n        const zoomProgress = localProgress / 50000;\n        if (isBackward) {\n          cameraX = Math.min(\n            190,\n            prevCameraPosition.x + zoomProgress * xFactor\n          );\n        } else {\n          cameraX = Math.max(\n            190,\n            prevCameraPosition.x + zoomProgress * xFactor\n          );\n        }\n        cameraY = Math.min(8, prevCameraPosition.y + zoomProgress);\n        if (isBackward) {\n          cameraZ = Math.max(\n            490,\n            prevCameraPosition.z + zoomProgress * zFactor\n          );\n        }\n        cameraZ = Math.min(490, prevCameraPosition.z + zoomProgress * zFactor);\n        camera.position.set(...[cameraX, cameraY, cameraZ]);\n      } else if (progress > 33611 && progress <= 34600) {\n        //BRAIN TO WORLD\n        movePlane({\n          fraction,\n          isBackward,\n          moveCamera: true,\n        });\n      } else if (progress > 34600 && progress <= 42000) {\n        movePlane({\n          fraction,\n          isBackward,\n          moveCamera: true,\n        });\n      } else {\n        movePlane({\n          fraction,\n          isBackward,\n          moveCamera: true,\n        });\n      }\n    }\n  }\n\n  function onTouchStart(e) {\n    var t = e.targetTouches ? e.targetTouches[0] : e;\n    touchStartY = t.pageY;\n  }\n\n  function onTouchMove(e) {\n    var evt = event;\n    var t = e.targetTouches ? e.targetTouches[0] : e;\n    // the multiply factor on mobile must be about 10x the factor applied on the wheel\n    evt.deltaY = (t.pageY - touchStartY) * 5;\n    touchStartY = t.pageY;\n    scroll(e);\n  }\n\n  useEffect(() => {\n    //TODO: KEEP AN EYE ON THE PROGRESS WITH THIS.\n    camera.position.z = 700;\n    divContainer.scrollIntoView();\n    //Scroll & resize event listeners\n    divContainer.addEventListener(\"wheel\", onWheel, false);\n    window.addEventListener(\"resize\", onResize, { passive: true });\n\n    //Zustand store subscriptions\n    const unSubscribeWorldChanges = useStore.subscribe(\n      (state) => state.world,\n      ({ progress, scrollingStopped }) => {\n        handleProgress(progress, scrollingStopped);\n      }\n    );\n\n    divContainer.addEventListener(\"touchstart\", onTouchStart);\n    divContainer.addEventListener(\"touchmove\", onTouchMove);\n\n    return () => {\n      divContainer.removeEventListener(\"wheel\", onWheel);\n\n      window.removeEventListener(\"resize\", onResize);\n      divContainer.removeEventListener(\"touchstart\", onTouchStart);\n      divContainer.removeEventListener(\"touchmove\", onTouchMove);\n      useStore.getState().world.setProgress(0);\n      useStore.getState().world.setScrollY(0);\n      unSubscribeWorldChanges();\n    };\n  }, []);\n\n  return (\n    <>\n      {/* <line geometry={lineGeometry}>\n        <lineBasicMaterial\n          attach=\"material\"\n          color=\"red\"\n          linecap={\"round\"}\n          linejoin={\"round\"}\n        />\n      </line> */}\n      <Planet />\n      <Suspense fallback={null}>\n        <PaperPlane />\n      </Suspense>\n      <DirectionalLight />\n\n      <Suspense fallback={null}>\n        <Fatstronaut />\n      </Suspense>\n\n      <TimeDefinition />\n\n      <Suspense fallback={null}>\n        <Brain />\n      </Suspense>\n\n      <CreativityDefiniton />\n\n      <Suspense fallback={null}>\n        <Stars />\n      </Suspense>\n\n      <Effect />\n      <Stats />\n\n      {/* <axesHelper args={[1000000]} /> */}\n    </>\n  );\n};\n\nexport default World;\n","export function lerp(a, b, t) {\n  return (1 - t) * a + t * b;\n}\n","import React, { useRef } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport World from \"../objects/world\";\n\nimport \"./styles.css\";\n\nconst Scene = () => {\n  const canvas = useRef();\n\n  return (\n    <div id=\"wrapper\">\n      <div id=\"webgl\" className=\"container\">\n        <Canvas\n          shadows\n          camera={{\n            far: 500,\n            near: 1,\n            fov: 45,\n            aspect: window.innerWidth / window.innerHeight,\n          }}\n          antialias\n          ref={canvas}\n        >\n          <World />\n        </Canvas>\n      </div>\n\n      {/* <Welcome /> */}\n      <div id=\"fold\" className=\"container\"></div>\n    </div>\n  );\n};\n\nexport default Scene;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./globals\";\n\nimport Scene from \"./scene\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Scene />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}